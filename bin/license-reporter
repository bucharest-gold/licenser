#! /usr/bin/env node

const cli = require('./cli.js');
const yargs = require('yargs');
const path = require('path');
process.title = 'license-reporter';

yargs
  .version(require('../package.json').version)
  .usage('Usage: $0 /path/to/project [options]')
  .option('file', {
    describe: 'file to store the license information in',
    type: 'string'
  })
  .option('all', {
    describe: 'will list all production licenses for all modules',
    default: false
  })
  .option('ignore-version-range', {
    describe: 'will list all licenses from declared package.json dependencies ignoring version range',
    default: false
  })
  .option('silent', {
    describe: 'hides the console output',
    default: false
  })
  .option('html', {
    describe: 'outputs the license in html format to license.html',
    default: false
  })
  .option('unified-list', {
    describe: 'will use the default unified list containing licenses approved or not',
    default: false
  })
  .option('merge', {
    describe: 'merge license.xml files',
    default: false
  })
  .option('merge-product-name', {
    describe: 'the name the product which the license.xml are part of',
    default: false
  })
  .option('merge-license-xmls', {
    describe: 'a comma separated list of license.xml files to merge',
    default: false
  })
  .option('merge-output', {
    describe: 'file to write the merged license info to'
  })
  .option('verbose', {
    describe: 'include the license content in the xml and not just the path to the file',
    default: false
  })
  .option('name-map', {
    describe: 'a file/url containing a mapping of license names',
    default: 'license-reporter/lib/resources/default-canonical-names.json'
  })
  .help();

const argv = yargs.argv;

var options = {
  production: true,
  alldeps: argv.all,
  directory: argv._[0],
  silent: argv.silent,
  file: argv.file,
  html: argv.html,
  merge: argv.merge,
  mergeProductName: argv['merge-product-name'],
  mergeXmls: argv['merge-license-xmls'],
  mergeOutput: argv['merge-output'],
  ignoreVersionRange: argv['ignore-version-range'],
  unifiedList: argv['unified-list'],
  verbose: argv.verbose,
  nameMap: path.resolve(argv['name-map'])
};

if (!options.directory || options.directory === '.') {
  options.directory = process.cwd();
}
options.directory = path.resolve(options.directory);
cli.run(options);
